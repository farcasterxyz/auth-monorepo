# This docker file uses a multi-stage build pattern as described here:
# https://github.com/goldbergyoni/nodebestpractices/blob/master/sections/docker/multi_stage_builds.md

###############################################################################
############## Stage 1: Create pruned version of monorepo #####################
###############################################################################

FROM node:20.2-alpine AS prune

RUN apk add --no-cache libc6-compat

# Install pnpm globally as root before switching user
RUN npm install -g pnpm

USER node
RUN mkdir /home/node/app
WORKDIR /home/node/app

# Copy workspace configuration
COPY --chown=node:node ./package.json ./package.json
COPY --chown=node:node ./pnpm-lock.yaml ./pnpm-lock.yaml
COPY --chown=node:node ./pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --chown=node:node ./turbo.json ./turbo.json

# Copy the relay app package.json
COPY --chown=node:node ./apps/relay/package.json ./apps/relay/package.json

# Create package directories
RUN mkdir -p packages/auth-client packages/jfs

# Copy package.json files for internal packages
COPY --chown=node:node ./packages/auth-client/package.json ./packages/auth-client/
COPY --chown=node:node ./packages/jfs/package.json ./packages/jfs/

###############################################################################
############## Stage 2: Build the code using a full node image ################
###############################################################################

FROM node:20.2-alpine AS build

# Needed for compilation step
RUN apk add --no-cache libc6-compat python3 make g++ linux-headers curl

# Install pnpm globally as root before switching user
RUN npm install -g pnpm

USER node
RUN mkdir /home/node/app
WORKDIR /home/node/app

# Install Rust
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.70.0
ENV PATH="/home/node/.cargo/bin:${PATH}"

# Rust flags to allow building with musl, which is needed for alpine
ENV RUSTFLAGS="-C target-feature=-crt-static"

# Copy dependency information from prune stage
COPY --chown=node:node --from=prune /home/node/app/package.json ./package.json
COPY --chown=node:node --from=prune /home/node/app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --chown=node:node --from=prune /home/node/app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --chown=node:node --from=prune /home/node/app/turbo.json ./turbo.json
COPY --chown=node:node --from=prune /home/node/app/apps/relay/package.json ./apps/relay/package.json
COPY --chown=node:node --from=prune /home/node/app/packages/ ./packages/

# Install dependencies for relay and its dependencies
RUN pnpm install --frozen-lockfile --filter=@farcaster/auth-relay...

# Copy source code
COPY --chown=node:node . .

# Build code
RUN pnpm --filter=@farcaster/auth-relay build

# Purge dev dependencies and only install production dependencies
RUN rm -rf node_modules && pnpm install --prod --frozen-lockfile --filter=@farcaster/auth-relay... --ignore-scripts

###############################################################################
########## Stage 3: Copy over the built code to a leaner alpine image #########
###############################################################################

FROM node:20.2-alpine as app

RUN apk add --no-cache curl # For health checks

# Set non-root user and expose ports
USER node

# Many npm packages use this to trigger production optimized behaviors
ENV NODE_ENV production

RUN mkdir /home/node/app
WORKDIR /home/node/app

# Copy workspace files and built app
COPY --chown=node:node --from=build /home/node/app/package.json ./package.json
COPY --chown=node:node --from=build /home/node/app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --chown=node:node --from=build /home/node/app/pnpm-workspace.yaml ./pnpm-workspace.yaml
COPY --chown=node:node --from=build /home/node/app/apps/relay ./apps/relay
COPY --chown=node:node --from=build /home/node/app/node_modules ./node_modules
COPY --chown=node:node --from=build /home/node/app/packages ./packages

# BuildKit doesn't support --squash flag, so emulate by copying into fewer layers
FROM scratch
COPY --from=app / /

# Repeat of above since it is lost between build stages
USER node
EXPOSE 8000
WORKDIR /home/node/app/apps/relay

CMD ["node", "build/app.js", "start"]
